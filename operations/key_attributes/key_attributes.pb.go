// Code generated by protoc-gen-go. DO NOT EDIT.
// source: key_attributes.proto

package key_attributes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KeyLifetime int32

const (
	KeyLifetime_Volatile   KeyLifetime = 0
	KeyLifetime_Persistent KeyLifetime = 1
)

var KeyLifetime_name = map[int32]string{
	0: "Volatile",
	1: "Persistent",
}

var KeyLifetime_value = map[string]int32{
	"Volatile":   0,
	"Persistent": 1,
}

func (x KeyLifetime) String() string {
	return proto.EnumName(KeyLifetime_name, int32(x))
}

func (KeyLifetime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{0}
}

type KeyType int32

const (
	KeyType_HMAC_Key       KeyType = 0
	KeyType_Derivation_Key KeyType = 1
	KeyType_AES_Key        KeyType = 2
	KeyType_DES_Key        KeyType = 3
	KeyType_Camellia_Key   KeyType = 4
	KeyType_ARC4_Key       KeyType = 5
	KeyType_RSA_Public_Key KeyType = 6
	KeyType_RSA_Keypair    KeyType = 7
	KeyType_DSA_Public_Key KeyType = 8
	KeyType_DSA_Keypair    KeyType = 9
	KeyType_ECC_Public_Key KeyType = 10
	KeyType_ECC_Keypair    KeyType = 11
)

var KeyType_name = map[int32]string{
	0:  "HMAC_Key",
	1:  "Derivation_Key",
	2:  "AES_Key",
	3:  "DES_Key",
	4:  "Camellia_Key",
	5:  "ARC4_Key",
	6:  "RSA_Public_Key",
	7:  "RSA_Keypair",
	8:  "DSA_Public_Key",
	9:  "DSA_Keypair",
	10: "ECC_Public_Key",
	11: "ECC_Keypair",
}

var KeyType_value = map[string]int32{
	"HMAC_Key":       0,
	"Derivation_Key": 1,
	"AES_Key":        2,
	"DES_Key":        3,
	"Camellia_Key":   4,
	"ARC4_Key":       5,
	"RSA_Public_Key": 6,
	"RSA_Keypair":    7,
	"DSA_Public_Key": 8,
	"DSA_Keypair":    9,
	"ECC_Public_Key": 10,
	"ECC_Keypair":    11,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{1}
}

type EccCurve int32

const (
	EccCurve_No_Ecc_Curve     EccCurve = 0
	EccCurve_SECT163K1        EccCurve = 1
	EccCurve_SECT163R1        EccCurve = 2
	EccCurve_SECT163R2        EccCurve = 3
	EccCurve_SECT193R1        EccCurve = 4
	EccCurve_SECT193R2        EccCurve = 5
	EccCurve_SECT233K1        EccCurve = 6
	EccCurve_SECT233R1        EccCurve = 7
	EccCurve_SECT239K1        EccCurve = 8
	EccCurve_SECT283K1        EccCurve = 9
	EccCurve_SECT283R1        EccCurve = 10
	EccCurve_SECT409K1        EccCurve = 11
	EccCurve_SECT409R1        EccCurve = 12
	EccCurve_SECT571K1        EccCurve = 13
	EccCurve_SECT571R1        EccCurve = 14
	EccCurve_SECP160K1        EccCurve = 15
	EccCurve_SECP160R1        EccCurve = 16
	EccCurve_SECP160R2        EccCurve = 17
	EccCurve_SECP192K1        EccCurve = 18
	EccCurve_SECP192R1        EccCurve = 19
	EccCurve_SECP224K1        EccCurve = 20
	EccCurve_SECP224R1        EccCurve = 21
	EccCurve_SECP256K1        EccCurve = 22
	EccCurve_SECP256R1        EccCurve = 23
	EccCurve_SECP384R1        EccCurve = 24
	EccCurve_SECP521R1        EccCurve = 25
	EccCurve_BRAINPOOL_P256R1 EccCurve = 26
	EccCurve_BRAINPOOL_P384R1 EccCurve = 27
	EccCurve_BRAINPOOL_P512R1 EccCurve = 28
	EccCurve_CURVE25519       EccCurve = 29
	EccCurve_CURVE448         EccCurve = 30
)

var EccCurve_name = map[int32]string{
	0:  "No_Ecc_Curve",
	1:  "SECT163K1",
	2:  "SECT163R1",
	3:  "SECT163R2",
	4:  "SECT193R1",
	5:  "SECT193R2",
	6:  "SECT233K1",
	7:  "SECT233R1",
	8:  "SECT239K1",
	9:  "SECT283K1",
	10: "SECT283R1",
	11: "SECT409K1",
	12: "SECT409R1",
	13: "SECT571K1",
	14: "SECT571R1",
	15: "SECP160K1",
	16: "SECP160R1",
	17: "SECP160R2",
	18: "SECP192K1",
	19: "SECP192R1",
	20: "SECP224K1",
	21: "SECP224R1",
	22: "SECP256K1",
	23: "SECP256R1",
	24: "SECP384R1",
	25: "SECP521R1",
	26: "BRAINPOOL_P256R1",
	27: "BRAINPOOL_P384R1",
	28: "BRAINPOOL_P512R1",
	29: "CURVE25519",
	30: "CURVE448",
}

var EccCurve_value = map[string]int32{
	"No_Ecc_Curve":     0,
	"SECT163K1":        1,
	"SECT163R1":        2,
	"SECT163R2":        3,
	"SECT193R1":        4,
	"SECT193R2":        5,
	"SECT233K1":        6,
	"SECT233R1":        7,
	"SECT239K1":        8,
	"SECT283K1":        9,
	"SECT283R1":        10,
	"SECT409K1":        11,
	"SECT409R1":        12,
	"SECT571K1":        13,
	"SECT571R1":        14,
	"SECP160K1":        15,
	"SECP160R1":        16,
	"SECP160R2":        17,
	"SECP192K1":        18,
	"SECP192R1":        19,
	"SECP224K1":        20,
	"SECP224R1":        21,
	"SECP256K1":        22,
	"SECP256R1":        23,
	"SECP384R1":        24,
	"SECP521R1":        25,
	"BRAINPOOL_P256R1": 26,
	"BRAINPOOL_P384R1": 27,
	"BRAINPOOL_P512R1": 28,
	"CURVE25519":       29,
	"CURVE448":         30,
}

func (x EccCurve) String() string {
	return proto.EnumName(EccCurve_name, int32(x))
}

func (EccCurve) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{2}
}

type HashAlgorithm int32

const (
	HashAlgorithm_No_Hash_Algorithm HashAlgorithm = 0
	HashAlgorithm_MD2               HashAlgorithm = 1
	HashAlgorithm_MD4               HashAlgorithm = 2
	HashAlgorithm_MD5               HashAlgorithm = 3
	HashAlgorithm_RIPEMD160         HashAlgorithm = 4
	HashAlgorithm_SHA_1             HashAlgorithm = 5
	HashAlgorithm_SHA_224           HashAlgorithm = 6
	HashAlgorithm_SHA_256           HashAlgorithm = 7
	HashAlgorithm_SHA_384           HashAlgorithm = 8
	HashAlgorithm_SHA_512           HashAlgorithm = 9
	HashAlgorithm_SHA_512_224       HashAlgorithm = 10
	HashAlgorithm_SHA_512_256       HashAlgorithm = 11
	HashAlgorithm_SHA3_224          HashAlgorithm = 12
	HashAlgorithm_SHA3_256          HashAlgorithm = 13
	HashAlgorithm_SHA3_384          HashAlgorithm = 14
	HashAlgorithm_SHA3_512          HashAlgorithm = 15
)

var HashAlgorithm_name = map[int32]string{
	0:  "No_Hash_Algorithm",
	1:  "MD2",
	2:  "MD4",
	3:  "MD5",
	4:  "RIPEMD160",
	5:  "SHA_1",
	6:  "SHA_224",
	7:  "SHA_256",
	8:  "SHA_384",
	9:  "SHA_512",
	10: "SHA_512_224",
	11: "SHA_512_256",
	12: "SHA3_224",
	13: "SHA3_256",
	14: "SHA3_384",
	15: "SHA3_512",
}

var HashAlgorithm_value = map[string]int32{
	"No_Hash_Algorithm": 0,
	"MD2":               1,
	"MD4":               2,
	"MD5":               3,
	"RIPEMD160":         4,
	"SHA_1":             5,
	"SHA_224":           6,
	"SHA_256":           7,
	"SHA_384":           8,
	"SHA_512":           9,
	"SHA_512_224":       10,
	"SHA_512_256":       11,
	"SHA3_224":          12,
	"SHA3_256":          13,
	"SHA3_384":          14,
	"SHA3_512":          15,
}

func (x HashAlgorithm) String() string {
	return proto.EnumName(HashAlgorithm_name, int32(x))
}

func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{3}
}

type CipherAlgorithm int32

const (
	CipherAlgorithm_ARC4           CipherAlgorithm = 0
	CipherAlgorithm_CTR            CipherAlgorithm = 1
	CipherAlgorithm_CFB            CipherAlgorithm = 2
	CipherAlgorithm_OFB            CipherAlgorithm = 3
	CipherAlgorithm_XTS            CipherAlgorithm = 4
	CipherAlgorithm_CBC_No_Padding CipherAlgorithm = 5
	CipherAlgorithm_CBC_PKCS7      CipherAlgorithm = 6
)

var CipherAlgorithm_name = map[int32]string{
	0: "ARC4",
	1: "CTR",
	2: "CFB",
	3: "OFB",
	4: "XTS",
	5: "CBC_No_Padding",
	6: "CBC_PKCS7",
}

var CipherAlgorithm_value = map[string]int32{
	"ARC4":           0,
	"CTR":            1,
	"CFB":            2,
	"OFB":            3,
	"XTS":            4,
	"CBC_No_Padding": 5,
	"CBC_PKCS7":      6,
}

func (x CipherAlgorithm) String() string {
	return proto.EnumName(CipherAlgorithm_name, int32(x))
}

func (CipherAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{4}
}

type AsymmetricEncryptionAlgorithm int32

const (
	AsymmetricEncryptionAlgorithm_RSA_PKCS1V15_Crypt AsymmetricEncryptionAlgorithm = 0
	AsymmetricEncryptionAlgorithm_RSA_OAEP           AsymmetricEncryptionAlgorithm = 1
)

var AsymmetricEncryptionAlgorithm_name = map[int32]string{
	0: "RSA_PKCS1V15_Crypt",
	1: "RSA_OAEP",
}

var AsymmetricEncryptionAlgorithm_value = map[string]int32{
	"RSA_PKCS1V15_Crypt": 0,
	"RSA_OAEP":           1,
}

func (x AsymmetricEncryptionAlgorithm) String() string {
	return proto.EnumName(AsymmetricEncryptionAlgorithm_name, int32(x))
}

func (AsymmetricEncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{5}
}

type MacAlgorithm int32

const (
	MacAlgorithm_HMAC    MacAlgorithm = 0
	MacAlgorithm_CBC_MAC MacAlgorithm = 1
	MacAlgorithm_CMAC    MacAlgorithm = 2
	MacAlgorithm_GMAC    MacAlgorithm = 3
)

var MacAlgorithm_name = map[int32]string{
	0: "HMAC",
	1: "CBC_MAC",
	2: "CMAC",
	3: "GMAC",
}

var MacAlgorithm_value = map[string]int32{
	"HMAC":    0,
	"CBC_MAC": 1,
	"CMAC":    2,
	"GMAC":    3,
}

func (x MacAlgorithm) String() string {
	return proto.EnumName(MacAlgorithm_name, int32(x))
}

func (MacAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{6}
}

type AeadAlgorithm int32

const (
	AeadAlgorithm_CCM AeadAlgorithm = 0
	AeadAlgorithm_GCM AeadAlgorithm = 1
)

var AeadAlgorithm_name = map[int32]string{
	0: "CCM",
	1: "GCM",
}

var AeadAlgorithm_value = map[string]int32{
	"CCM": 0,
	"GCM": 1,
}

func (x AeadAlgorithm) String() string {
	return proto.EnumName(AeadAlgorithm_name, int32(x))
}

func (AeadAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{7}
}

type SignAlgorithm int32

const (
	SignAlgorithm_RSA_PKCS1V15_Sign   SignAlgorithm = 0
	SignAlgorithm_RSA_PSS             SignAlgorithm = 1
	SignAlgorithm_DSA                 SignAlgorithm = 2
	SignAlgorithm_Deterministic_DSA   SignAlgorithm = 3
	SignAlgorithm_ECDSA               SignAlgorithm = 4
	SignAlgorithm_Deterministic_ECDSA SignAlgorithm = 5
)

var SignAlgorithm_name = map[int32]string{
	0: "RSA_PKCS1V15_Sign",
	1: "RSA_PSS",
	2: "DSA",
	3: "Deterministic_DSA",
	4: "ECDSA",
	5: "Deterministic_ECDSA",
}

var SignAlgorithm_value = map[string]int32{
	"RSA_PKCS1V15_Sign":   0,
	"RSA_PSS":             1,
	"DSA":                 2,
	"Deterministic_DSA":   3,
	"ECDSA":               4,
	"Deterministic_ECDSA": 5,
}

func (x SignAlgorithm) String() string {
	return proto.EnumName(SignAlgorithm_name, int32(x))
}

func (SignAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{8}
}

type KeyDerivationFunction int32

const (
	KeyDerivationFunction_HKDF            KeyDerivationFunction = 0
	KeyDerivationFunction_TLS12_PRF       KeyDerivationFunction = 1
	KeyDerivationFunction_TLS12_PSK_To_MS KeyDerivationFunction = 2
	KeyDerivationFunction_Select_Raw      KeyDerivationFunction = 3
)

var KeyDerivationFunction_name = map[int32]string{
	0: "HKDF",
	1: "TLS12_PRF",
	2: "TLS12_PSK_To_MS",
	3: "Select_Raw",
}

var KeyDerivationFunction_value = map[string]int32{
	"HKDF":            0,
	"TLS12_PRF":       1,
	"TLS12_PSK_To_MS": 2,
	"Select_Raw":      3,
}

func (x KeyDerivationFunction) String() string {
	return proto.EnumName(KeyDerivationFunction_name, int32(x))
}

func (KeyDerivationFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{9}
}

type KeyAgreementAlgorithm int32

const (
	KeyAgreementAlgorithm_FFDH KeyAgreementAlgorithm = 0
	KeyAgreementAlgorithm_ECDH KeyAgreementAlgorithm = 1
)

var KeyAgreementAlgorithm_name = map[int32]string{
	0: "FFDH",
	1: "ECDH",
}

var KeyAgreementAlgorithm_value = map[string]int32{
	"FFDH": 0,
	"ECDH": 1,
}

func (x KeyAgreementAlgorithm) String() string {
	return proto.EnumName(KeyAgreementAlgorithm_name, int32(x))
}

func (KeyAgreementAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{10}
}

type AsymmetricEncryption struct {
	AsymmetricEncryptionAlgorithm AsymmetricEncryptionAlgorithm `protobuf:"varint,1,opt,name=asymmetric_encryption_algorithm,json=asymmetricEncryptionAlgorithm,proto3,enum=key_attributes.AsymmetricEncryptionAlgorithm" json:"asymmetric_encryption_algorithm,omitempty"`
	HashAlgorithm                 HashAlgorithm                 `protobuf:"varint,2,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=key_attributes.HashAlgorithm" json:"hash_algorithm,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                      `json:"-"`
	XXX_unrecognized              []byte                        `json:"-"`
	XXX_sizecache                 int32                         `json:"-"`
}

func (m *AsymmetricEncryption) Reset()         { *m = AsymmetricEncryption{} }
func (m *AsymmetricEncryption) String() string { return proto.CompactTextString(m) }
func (*AsymmetricEncryption) ProtoMessage()    {}
func (*AsymmetricEncryption) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{0}
}

func (m *AsymmetricEncryption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AsymmetricEncryption.Unmarshal(m, b)
}
func (m *AsymmetricEncryption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AsymmetricEncryption.Marshal(b, m, deterministic)
}
func (m *AsymmetricEncryption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsymmetricEncryption.Merge(m, src)
}
func (m *AsymmetricEncryption) XXX_Size() int {
	return xxx_messageInfo_AsymmetricEncryption.Size(m)
}
func (m *AsymmetricEncryption) XXX_DiscardUnknown() {
	xxx_messageInfo_AsymmetricEncryption.DiscardUnknown(m)
}

var xxx_messageInfo_AsymmetricEncryption proto.InternalMessageInfo

func (m *AsymmetricEncryption) GetAsymmetricEncryptionAlgorithm() AsymmetricEncryptionAlgorithm {
	if m != nil {
		return m.AsymmetricEncryptionAlgorithm
	}
	return AsymmetricEncryptionAlgorithm_RSA_PKCS1V15_Crypt
}

func (m *AsymmetricEncryption) GetHashAlgorithm() HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return HashAlgorithm_No_Hash_Algorithm
}

type Mac struct {
	MacAlgorithm         MacAlgorithm  `protobuf:"varint,1,opt,name=mac_algorithm,json=macAlgorithm,proto3,enum=key_attributes.MacAlgorithm" json:"mac_algorithm,omitempty"`
	HashAlgorithm        HashAlgorithm `protobuf:"varint,2,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=key_attributes.HashAlgorithm" json:"hash_algorithm,omitempty"`
	TagLength            uint32        `protobuf:"varint,3,opt,name=tag_length,json=tagLength,proto3" json:"tag_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Mac) Reset()         { *m = Mac{} }
func (m *Mac) String() string { return proto.CompactTextString(m) }
func (*Mac) ProtoMessage()    {}
func (*Mac) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{1}
}

func (m *Mac) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mac.Unmarshal(m, b)
}
func (m *Mac) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mac.Marshal(b, m, deterministic)
}
func (m *Mac) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mac.Merge(m, src)
}
func (m *Mac) XXX_Size() int {
	return xxx_messageInfo_Mac.Size(m)
}
func (m *Mac) XXX_DiscardUnknown() {
	xxx_messageInfo_Mac.DiscardUnknown(m)
}

var xxx_messageInfo_Mac proto.InternalMessageInfo

func (m *Mac) GetMacAlgorithm() MacAlgorithm {
	if m != nil {
		return m.MacAlgorithm
	}
	return MacAlgorithm_HMAC
}

func (m *Mac) GetHashAlgorithm() HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return HashAlgorithm_No_Hash_Algorithm
}

func (m *Mac) GetTagLength() uint32 {
	if m != nil {
		return m.TagLength
	}
	return 0
}

type Aead struct {
	AeadAlgorithm        AeadAlgorithm `protobuf:"varint,1,opt,name=aead_algorithm,json=aeadAlgorithm,proto3,enum=key_attributes.AeadAlgorithm" json:"aead_algorithm,omitempty"`
	TagLength            uint32        `protobuf:"varint,2,opt,name=tag_length,json=tagLength,proto3" json:"tag_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Aead) Reset()         { *m = Aead{} }
func (m *Aead) String() string { return proto.CompactTextString(m) }
func (*Aead) ProtoMessage()    {}
func (*Aead) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{2}
}

func (m *Aead) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Aead.Unmarshal(m, b)
}
func (m *Aead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Aead.Marshal(b, m, deterministic)
}
func (m *Aead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Aead.Merge(m, src)
}
func (m *Aead) XXX_Size() int {
	return xxx_messageInfo_Aead.Size(m)
}
func (m *Aead) XXX_DiscardUnknown() {
	xxx_messageInfo_Aead.DiscardUnknown(m)
}

var xxx_messageInfo_Aead proto.InternalMessageInfo

func (m *Aead) GetAeadAlgorithm() AeadAlgorithm {
	if m != nil {
		return m.AeadAlgorithm
	}
	return AeadAlgorithm_CCM
}

func (m *Aead) GetTagLength() uint32 {
	if m != nil {
		return m.TagLength
	}
	return 0
}

type Sign struct {
	SignAlgorithm        SignAlgorithm `protobuf:"varint,1,opt,name=sign_algorithm,json=signAlgorithm,proto3,enum=key_attributes.SignAlgorithm" json:"sign_algorithm,omitempty"`
	HashAlgorithm        HashAlgorithm `protobuf:"varint,2,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=key_attributes.HashAlgorithm" json:"hash_algorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Sign) Reset()         { *m = Sign{} }
func (m *Sign) String() string { return proto.CompactTextString(m) }
func (*Sign) ProtoMessage()    {}
func (*Sign) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{3}
}

func (m *Sign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sign.Unmarshal(m, b)
}
func (m *Sign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sign.Marshal(b, m, deterministic)
}
func (m *Sign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sign.Merge(m, src)
}
func (m *Sign) XXX_Size() int {
	return xxx_messageInfo_Sign.Size(m)
}
func (m *Sign) XXX_DiscardUnknown() {
	xxx_messageInfo_Sign.DiscardUnknown(m)
}

var xxx_messageInfo_Sign proto.InternalMessageInfo

func (m *Sign) GetSignAlgorithm() SignAlgorithm {
	if m != nil {
		return m.SignAlgorithm
	}
	return SignAlgorithm_RSA_PKCS1V15_Sign
}

func (m *Sign) GetHashAlgorithm() HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return HashAlgorithm_No_Hash_Algorithm
}

type KeyDerivation struct {
	KeyDerivationFunction KeyDerivationFunction `protobuf:"varint,1,opt,name=key_derivation_function,json=keyDerivationFunction,proto3,enum=key_attributes.KeyDerivationFunction" json:"key_derivation_function,omitempty"`
	HashAlgorithm         HashAlgorithm         `protobuf:"varint,2,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=key_attributes.HashAlgorithm" json:"hash_algorithm,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *KeyDerivation) Reset()         { *m = KeyDerivation{} }
func (m *KeyDerivation) String() string { return proto.CompactTextString(m) }
func (*KeyDerivation) ProtoMessage()    {}
func (*KeyDerivation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{4}
}

func (m *KeyDerivation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyDerivation.Unmarshal(m, b)
}
func (m *KeyDerivation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyDerivation.Marshal(b, m, deterministic)
}
func (m *KeyDerivation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDerivation.Merge(m, src)
}
func (m *KeyDerivation) XXX_Size() int {
	return xxx_messageInfo_KeyDerivation.Size(m)
}
func (m *KeyDerivation) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDerivation.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDerivation proto.InternalMessageInfo

func (m *KeyDerivation) GetKeyDerivationFunction() KeyDerivationFunction {
	if m != nil {
		return m.KeyDerivationFunction
	}
	return KeyDerivationFunction_HKDF
}

func (m *KeyDerivation) GetHashAlgorithm() HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return HashAlgorithm_No_Hash_Algorithm
}

type KeyAgreement struct {
	KeyAgreementAlgorithm KeyAgreementAlgorithm `protobuf:"varint,1,opt,name=key_agreement_algorithm,json=keyAgreementAlgorithm,proto3,enum=key_attributes.KeyAgreementAlgorithm" json:"key_agreement_algorithm,omitempty"`
	KeyDerivation         *KeyDerivation        `protobuf:"bytes,2,opt,name=key_derivation,json=keyDerivation,proto3" json:"key_derivation,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *KeyAgreement) Reset()         { *m = KeyAgreement{} }
func (m *KeyAgreement) String() string { return proto.CompactTextString(m) }
func (*KeyAgreement) ProtoMessage()    {}
func (*KeyAgreement) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{5}
}

func (m *KeyAgreement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyAgreement.Unmarshal(m, b)
}
func (m *KeyAgreement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyAgreement.Marshal(b, m, deterministic)
}
func (m *KeyAgreement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyAgreement.Merge(m, src)
}
func (m *KeyAgreement) XXX_Size() int {
	return xxx_messageInfo_KeyAgreement.Size(m)
}
func (m *KeyAgreement) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyAgreement.DiscardUnknown(m)
}

var xxx_messageInfo_KeyAgreement proto.InternalMessageInfo

func (m *KeyAgreement) GetKeyAgreementAlgorithm() KeyAgreementAlgorithm {
	if m != nil {
		return m.KeyAgreementAlgorithm
	}
	return KeyAgreementAlgorithm_FFDH
}

func (m *KeyAgreement) GetKeyDerivation() *KeyDerivation {
	if m != nil {
		return m.KeyDerivation
	}
	return nil
}

type KeyAttributesProto struct {
	KeyLifetime KeyLifetime `protobuf:"varint,1,opt,name=key_lifetime,json=keyLifetime,proto3,enum=key_attributes.KeyLifetime" json:"key_lifetime,omitempty"`
	KeyType     KeyType     `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=key_attributes.KeyType" json:"key_type,omitempty"`
	EccCurve    EccCurve    `protobuf:"varint,3,opt,name=ecc_curve,json=eccCurve,proto3,enum=key_attributes.EccCurve" json:"ecc_curve,omitempty"`
	// Types that are valid to be assigned to AlgorithmProto:
	//	*KeyAttributesProto_CipherAlgorithm
	//	*KeyAttributesProto_AsymmetricEncryption
	//	*KeyAttributesProto_Mac
	//	*KeyAttributesProto_Aead
	//	*KeyAttributesProto_Sign
	//	*KeyAttributesProto_KeyDerivation
	//	*KeyAttributesProto_KeyAgreement
	//	*KeyAttributesProto_HashAlgorithm
	AlgorithmProto       isKeyAttributesProto_AlgorithmProto `protobuf_oneof:"algorithm_proto"`
	KeySize              uint32                              `protobuf:"varint,4,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	PermitExport         bool                                `protobuf:"varint,5,opt,name=permit_export,json=permitExport,proto3" json:"permit_export,omitempty"`
	PermitEncrypt        bool                                `protobuf:"varint,6,opt,name=permit_encrypt,json=permitEncrypt,proto3" json:"permit_encrypt,omitempty"`
	PermitDecrypt        bool                                `protobuf:"varint,7,opt,name=permit_decrypt,json=permitDecrypt,proto3" json:"permit_decrypt,omitempty"`
	PermitSign           bool                                `protobuf:"varint,8,opt,name=permit_sign,json=permitSign,proto3" json:"permit_sign,omitempty"`
	PermitVerify         bool                                `protobuf:"varint,9,opt,name=permit_verify,json=permitVerify,proto3" json:"permit_verify,omitempty"`
	PermitDerive         bool                                `protobuf:"varint,10,opt,name=permit_derive,json=permitDerive,proto3" json:"permit_derive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *KeyAttributesProto) Reset()         { *m = KeyAttributesProto{} }
func (m *KeyAttributesProto) String() string { return proto.CompactTextString(m) }
func (*KeyAttributesProto) ProtoMessage()    {}
func (*KeyAttributesProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cacbc47de894989, []int{6}
}

func (m *KeyAttributesProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyAttributesProto.Unmarshal(m, b)
}
func (m *KeyAttributesProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyAttributesProto.Marshal(b, m, deterministic)
}
func (m *KeyAttributesProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyAttributesProto.Merge(m, src)
}
func (m *KeyAttributesProto) XXX_Size() int {
	return xxx_messageInfo_KeyAttributesProto.Size(m)
}
func (m *KeyAttributesProto) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyAttributesProto.DiscardUnknown(m)
}

var xxx_messageInfo_KeyAttributesProto proto.InternalMessageInfo

func (m *KeyAttributesProto) GetKeyLifetime() KeyLifetime {
	if m != nil {
		return m.KeyLifetime
	}
	return KeyLifetime_Volatile
}

func (m *KeyAttributesProto) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_HMAC_Key
}

func (m *KeyAttributesProto) GetEccCurve() EccCurve {
	if m != nil {
		return m.EccCurve
	}
	return EccCurve_No_Ecc_Curve
}

type isKeyAttributesProto_AlgorithmProto interface {
	isKeyAttributesProto_AlgorithmProto()
}

type KeyAttributesProto_CipherAlgorithm struct {
	CipherAlgorithm CipherAlgorithm `protobuf:"varint,100,opt,name=cipher_algorithm,json=cipherAlgorithm,proto3,enum=key_attributes.CipherAlgorithm,oneof"`
}

type KeyAttributesProto_AsymmetricEncryption struct {
	AsymmetricEncryption *AsymmetricEncryption `protobuf:"bytes,101,opt,name=asymmetric_encryption,json=asymmetricEncryption,proto3,oneof"`
}

type KeyAttributesProto_Mac struct {
	Mac *Mac `protobuf:"bytes,102,opt,name=mac,proto3,oneof"`
}

type KeyAttributesProto_Aead struct {
	Aead *Aead `protobuf:"bytes,103,opt,name=aead,proto3,oneof"`
}

type KeyAttributesProto_Sign struct {
	Sign *Sign `protobuf:"bytes,104,opt,name=sign,proto3,oneof"`
}

type KeyAttributesProto_KeyDerivation struct {
	KeyDerivation *KeyDerivation `protobuf:"bytes,105,opt,name=key_derivation,json=keyDerivation,proto3,oneof"`
}

type KeyAttributesProto_KeyAgreement struct {
	KeyAgreement *KeyAgreement `protobuf:"bytes,106,opt,name=key_agreement,json=keyAgreement,proto3,oneof"`
}

type KeyAttributesProto_HashAlgorithm struct {
	HashAlgorithm HashAlgorithm `protobuf:"varint,107,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=key_attributes.HashAlgorithm,oneof"`
}

func (*KeyAttributesProto_CipherAlgorithm) isKeyAttributesProto_AlgorithmProto() {}

func (*KeyAttributesProto_AsymmetricEncryption) isKeyAttributesProto_AlgorithmProto() {}

func (*KeyAttributesProto_Mac) isKeyAttributesProto_AlgorithmProto() {}

func (*KeyAttributesProto_Aead) isKeyAttributesProto_AlgorithmProto() {}

func (*KeyAttributesProto_Sign) isKeyAttributesProto_AlgorithmProto() {}

func (*KeyAttributesProto_KeyDerivation) isKeyAttributesProto_AlgorithmProto() {}

func (*KeyAttributesProto_KeyAgreement) isKeyAttributesProto_AlgorithmProto() {}

func (*KeyAttributesProto_HashAlgorithm) isKeyAttributesProto_AlgorithmProto() {}

func (m *KeyAttributesProto) GetAlgorithmProto() isKeyAttributesProto_AlgorithmProto {
	if m != nil {
		return m.AlgorithmProto
	}
	return nil
}

func (m *KeyAttributesProto) GetCipherAlgorithm() CipherAlgorithm {
	if x, ok := m.GetAlgorithmProto().(*KeyAttributesProto_CipherAlgorithm); ok {
		return x.CipherAlgorithm
	}
	return CipherAlgorithm_ARC4
}

func (m *KeyAttributesProto) GetAsymmetricEncryption() *AsymmetricEncryption {
	if x, ok := m.GetAlgorithmProto().(*KeyAttributesProto_AsymmetricEncryption); ok {
		return x.AsymmetricEncryption
	}
	return nil
}

func (m *KeyAttributesProto) GetMac() *Mac {
	if x, ok := m.GetAlgorithmProto().(*KeyAttributesProto_Mac); ok {
		return x.Mac
	}
	return nil
}

func (m *KeyAttributesProto) GetAead() *Aead {
	if x, ok := m.GetAlgorithmProto().(*KeyAttributesProto_Aead); ok {
		return x.Aead
	}
	return nil
}

func (m *KeyAttributesProto) GetSign() *Sign {
	if x, ok := m.GetAlgorithmProto().(*KeyAttributesProto_Sign); ok {
		return x.Sign
	}
	return nil
}

func (m *KeyAttributesProto) GetKeyDerivation() *KeyDerivation {
	if x, ok := m.GetAlgorithmProto().(*KeyAttributesProto_KeyDerivation); ok {
		return x.KeyDerivation
	}
	return nil
}

func (m *KeyAttributesProto) GetKeyAgreement() *KeyAgreement {
	if x, ok := m.GetAlgorithmProto().(*KeyAttributesProto_KeyAgreement); ok {
		return x.KeyAgreement
	}
	return nil
}

func (m *KeyAttributesProto) GetHashAlgorithm() HashAlgorithm {
	if x, ok := m.GetAlgorithmProto().(*KeyAttributesProto_HashAlgorithm); ok {
		return x.HashAlgorithm
	}
	return HashAlgorithm_No_Hash_Algorithm
}

func (m *KeyAttributesProto) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *KeyAttributesProto) GetPermitExport() bool {
	if m != nil {
		return m.PermitExport
	}
	return false
}

func (m *KeyAttributesProto) GetPermitEncrypt() bool {
	if m != nil {
		return m.PermitEncrypt
	}
	return false
}

func (m *KeyAttributesProto) GetPermitDecrypt() bool {
	if m != nil {
		return m.PermitDecrypt
	}
	return false
}

func (m *KeyAttributesProto) GetPermitSign() bool {
	if m != nil {
		return m.PermitSign
	}
	return false
}

func (m *KeyAttributesProto) GetPermitVerify() bool {
	if m != nil {
		return m.PermitVerify
	}
	return false
}

func (m *KeyAttributesProto) GetPermitDerive() bool {
	if m != nil {
		return m.PermitDerive
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*KeyAttributesProto) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*KeyAttributesProto_CipherAlgorithm)(nil),
		(*KeyAttributesProto_AsymmetricEncryption)(nil),
		(*KeyAttributesProto_Mac)(nil),
		(*KeyAttributesProto_Aead)(nil),
		(*KeyAttributesProto_Sign)(nil),
		(*KeyAttributesProto_KeyDerivation)(nil),
		(*KeyAttributesProto_KeyAgreement)(nil),
		(*KeyAttributesProto_HashAlgorithm)(nil),
	}
}

func init() {
	proto.RegisterEnum("key_attributes.KeyLifetime", KeyLifetime_name, KeyLifetime_value)
	proto.RegisterEnum("key_attributes.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("key_attributes.EccCurve", EccCurve_name, EccCurve_value)
	proto.RegisterEnum("key_attributes.HashAlgorithm", HashAlgorithm_name, HashAlgorithm_value)
	proto.RegisterEnum("key_attributes.CipherAlgorithm", CipherAlgorithm_name, CipherAlgorithm_value)
	proto.RegisterEnum("key_attributes.AsymmetricEncryptionAlgorithm", AsymmetricEncryptionAlgorithm_name, AsymmetricEncryptionAlgorithm_value)
	proto.RegisterEnum("key_attributes.MacAlgorithm", MacAlgorithm_name, MacAlgorithm_value)
	proto.RegisterEnum("key_attributes.AeadAlgorithm", AeadAlgorithm_name, AeadAlgorithm_value)
	proto.RegisterEnum("key_attributes.SignAlgorithm", SignAlgorithm_name, SignAlgorithm_value)
	proto.RegisterEnum("key_attributes.KeyDerivationFunction", KeyDerivationFunction_name, KeyDerivationFunction_value)
	proto.RegisterEnum("key_attributes.KeyAgreementAlgorithm", KeyAgreementAlgorithm_name, KeyAgreementAlgorithm_value)
	proto.RegisterType((*AsymmetricEncryption)(nil), "key_attributes.AsymmetricEncryption")
	proto.RegisterType((*Mac)(nil), "key_attributes.Mac")
	proto.RegisterType((*Aead)(nil), "key_attributes.Aead")
	proto.RegisterType((*Sign)(nil), "key_attributes.Sign")
	proto.RegisterType((*KeyDerivation)(nil), "key_attributes.KeyDerivation")
	proto.RegisterType((*KeyAgreement)(nil), "key_attributes.KeyAgreement")
	proto.RegisterType((*KeyAttributesProto)(nil), "key_attributes.KeyAttributesProto")
}

func init() { proto.RegisterFile("key_attributes.proto", fileDescriptor_3cacbc47de894989) }

var fileDescriptor_3cacbc47de894989 = []byte{
	// 1396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x25, 0xd9, 0x92, 0x46, 0x3f, 0xde, 0xac, 0xed, 0x58, 0x69, 0xe2, 0x26, 0x75, 0x1b,
	0x34, 0x50, 0xd0, 0x20, 0xa4, 0x25, 0xc7, 0xbe, 0x14, 0x90, 0x29, 0x29, 0x0a, 0x68, 0xd9, 0xc2,
	0xd2, 0x31, 0x0a, 0x14, 0x05, 0x41, 0xd3, 0x6b, 0x89, 0xb5, 0xfe, 0x20, 0xd1, 0x49, 0x95, 0xc7,
	0xe8, 0x7b, 0xf4, 0xd4, 0x3e, 0x46, 0x6f, 0xed, 0x4b, 0xf4, 0xdc, 0x17, 0x28, 0x66, 0xf9, 0xa3,
	0xa5, 0x2c, 0xa4, 0x39, 0xe4, 0x36, 0xdf, 0xb7, 0xdf, 0xce, 0xcc, 0xee, 0xce, 0x0c, 0x09, 0x5b,
	0x37, 0x7c, 0x6e, 0xd9, 0x9e, 0x37, 0x75, 0x2f, 0x6f, 0x3d, 0x3e, 0x7b, 0x31, 0x99, 0x8e, 0xbd,
	0x31, 0x2d, 0xc5, 0xd9, 0xbd, 0xbf, 0x14, 0xd8, 0xaa, 0xcf, 0xe6, 0xc3, 0x21, 0xf7, 0xa6, 0xae,
	0xd3, 0x1c, 0x39, 0xd3, 0xf9, 0xc4, 0x73, 0xc7, 0x23, 0x7a, 0x0b, 0x8f, 0xed, 0x88, 0xb7, 0x78,
	0xb4, 0x60, 0xd9, 0x83, 0xde, 0x78, 0xea, 0x7a, 0xfd, 0x61, 0x59, 0x79, 0xa2, 0x3c, 0x2b, 0x69,
	0xdf, 0xbd, 0x58, 0x0a, 0xb4, 0xca, 0x5d, 0x3d, 0xdc, 0xc4, 0x76, 0xed, 0x8f, 0x2d, 0xd3, 0x06,
	0x94, 0xfa, 0xf6, 0xac, 0x2f, 0x45, 0x49, 0x8a, 0x28, 0xbb, 0xcb, 0x51, 0xda, 0xf6, 0xac, 0xbf,
	0xf0, 0x5a, 0xec, 0xcb, 0x70, 0xef, 0x37, 0x05, 0x52, 0x1d, 0xdb, 0xa1, 0x75, 0x28, 0x0e, 0x6d,
	0xe7, 0x4e, 0xca, 0x8f, 0x96, 0x9d, 0x75, 0x6c, 0x67, 0xe1, 0xab, 0x30, 0x94, 0xd0, 0xe7, 0x49,
	0x88, 0xee, 0x02, 0x78, 0x76, 0xcf, 0x1a, 0xf0, 0x51, 0xcf, 0xeb, 0x97, 0x53, 0x4f, 0x94, 0x67,
	0x45, 0x96, 0xf3, 0xec, 0xde, 0x89, 0x20, 0xf6, 0x6e, 0x20, 0x5d, 0xe7, 0xf6, 0x15, 0x06, 0xb3,
	0xb9, 0x7d, 0x75, 0x27, 0xe1, 0x3b, 0xc1, 0x50, 0x2d, 0x05, 0xb3, 0x65, 0xb8, 0x14, 0x2c, 0xb9,
	0x1c, 0xec, 0x57, 0x05, 0xd2, 0xa6, 0xdb, 0x1b, 0x61, 0xb4, 0x99, 0xdb, 0x1b, 0xfd, 0x7f, 0x34,
	0x54, 0x4b, 0xd1, 0x66, 0x32, 0xfc, 0x4c, 0x2f, 0xf6, 0x87, 0x02, 0x45, 0x83, 0xcf, 0x1b, 0x7c,
	0xea, 0xbe, 0xb3, 0x45, 0x01, 0xfe, 0x04, 0x3b, 0xe8, 0xe0, 0x2a, 0x62, 0xac, 0xeb, 0xdb, 0x91,
	0x83, 0x46, 0x90, 0xe6, 0xd3, 0xe5, 0x00, 0xb1, 0xfd, 0xad, 0x40, 0xcc, 0xb6, 0x6f, 0x56, 0xd1,
	0x9f, 0x29, 0xed, 0xdf, 0x15, 0x28, 0x18, 0x7c, 0x5e, 0xef, 0x4d, 0x39, 0x1f, 0xf2, 0x91, 0x17,
	0x66, 0x6d, 0x87, 0xc4, 0x9d, 0xcb, 0x5d, 0x95, 0x75, 0xb4, 0x7d, 0x11, 0x07, 0xb3, 0xbe, 0x4b,
	0x63, 0xd6, 0xf1, 0x4b, 0x11, 0x59, 0xe7, 0xef, 0x66, 0x1d, 0xbb, 0x0b, 0x56, 0x8c, 0xdd, 0xc1,
	0xde, 0x9f, 0x19, 0xa0, 0x18, 0x36, 0x92, 0x77, 0xc5, 0x6c, 0xf8, 0x1e, 0x0a, 0xe8, 0x65, 0xe0,
	0x5e, 0x73, 0xcf, 0x1d, 0xf2, 0x20, 0xe1, 0x87, 0x2b, 0x5c, 0x9f, 0x04, 0x12, 0x96, 0xbf, 0x59,
	0x00, 0xaa, 0x41, 0x16, 0xa5, 0xde, 0x7c, 0xc2, 0x83, 0xcb, 0xdc, 0x59, 0xb1, 0xf7, 0x7c, 0x3e,
	0xe1, 0x2c, 0x73, 0xe3, 0x1b, 0xb4, 0x06, 0x39, 0xee, 0x38, 0x96, 0x73, 0x3b, 0x7d, 0xc7, 0x45,
	0x5f, 0x94, 0xb4, 0xf2, 0xf2, 0xa6, 0xa6, 0xe3, 0xe8, 0xb8, 0xce, 0xb2, 0x3c, 0xb0, 0xe8, 0x09,
	0x10, 0xc7, 0x9d, 0xf4, 0xf9, 0x54, 0xba, 0xdf, 0x2b, 0xb1, 0xfb, 0xf1, 0xf2, 0x6e, 0x5d, 0xe8,
	0xa2, 0x2b, 0x6c, 0x27, 0xd8, 0x86, 0x13, 0xa7, 0xe8, 0x8f, 0xb0, 0xbd, 0x72, 0xd6, 0x95, 0xb9,
	0xb8, 0xdc, 0x6f, 0x3e, 0x65, 0xc2, 0xb5, 0x13, 0x6c, 0x6b, 0xd5, 0x68, 0xa3, 0xdf, 0x42, 0x6a,
	0x68, 0x3b, 0xe5, 0x6b, 0xe1, 0x6a, 0x73, 0xc5, 0xe4, 0x69, 0x27, 0x18, 0x2a, 0x68, 0x05, 0xd2,
	0xd8, 0xc7, 0xe5, 0x9e, 0x50, 0x6e, 0xad, 0x6a, 0xf9, 0x76, 0x82, 0x09, 0x0d, 0x6a, 0xb1, 0x0b,
	0xcb, 0xfd, 0xd5, 0x5a, 0x6c, 0x58, 0xd4, 0xa2, 0x86, 0xb6, 0xee, 0xd4, 0x8c, 0xfb, 0x09, 0x35,
	0xd3, 0x4e, 0x2c, 0x55, 0x0d, 0xd5, 0xa1, 0x18, 0x2b, 0xed, 0xf2, 0xcf, 0xc2, 0xcd, 0xa3, 0x8f,
	0x15, 0x74, 0x3b, 0xc1, 0x0a, 0x72, 0x25, 0x63, 0x32, 0x4b, 0x6d, 0x77, 0xf3, 0x09, 0x6d, 0x87,
	0xc9, 0xc4, 0x07, 0xea, 0x03, 0xbf, 0xd6, 0x66, 0xee, 0x07, 0x5e, 0x4e, 0x8b, 0x09, 0x87, 0x25,
	0x65, 0xba, 0x1f, 0x38, 0xfd, 0x1a, 0x8a, 0x13, 0x3e, 0x1d, 0xba, 0x9e, 0xc5, 0x7f, 0x99, 0x8c,
	0xa7, 0x5e, 0x79, 0xed, 0x89, 0xf2, 0x2c, 0xcb, 0x0a, 0x3e, 0xd9, 0x14, 0x1c, 0x7d, 0x0a, 0xa5,
	0x50, 0xe4, 0x3f, 0x55, 0x79, 0x5d, 0xa8, 0x82, 0xad, 0xc1, 0xfb, 0x49, 0xb2, 0x2b, 0xee, 0xcb,
	0x32, 0xb2, 0xac, 0xe1, 0x93, 0xf4, 0x31, 0xe4, 0x03, 0x99, 0x78, 0x95, 0xac, 0xd0, 0x80, 0x4f,
	0x89, 0x51, 0xbb, 0xc8, 0xe9, 0x1d, 0x9f, 0xba, 0xd7, 0xf3, 0x72, 0x4e, 0xce, 0xe9, 0x42, 0x70,
	0x92, 0x48, 0xbc, 0x15, 0x2f, 0x83, 0x2c, 0x12, 0x2f, 0xc1, 0x8f, 0xef, 0xc1, 0x46, 0x74, 0x77,
	0x96, 0xf8, 0xa6, 0x57, 0x9e, 0x43, 0x5e, 0xea, 0x49, 0x5a, 0x80, 0xec, 0xc5, 0x78, 0x60, 0x7b,
	0xee, 0x80, 0x93, 0x04, 0x2d, 0x01, 0x74, 0xf9, 0x74, 0xe6, 0xce, 0x3c, 0x3e, 0xf2, 0x88, 0x52,
	0xf9, 0x5b, 0x81, 0x4c, 0xd0, 0x85, 0xa8, 0x6c, 0x77, 0xea, 0xba, 0x65, 0xf0, 0x39, 0x49, 0x50,
	0x0a, 0xa5, 0xc5, 0x6b, 0x0b, 0x4e, 0xa1, 0x79, 0xc8, 0xd4, 0x9b, 0xa6, 0x00, 0x49, 0x04, 0x8d,
	0x00, 0xa4, 0x28, 0x81, 0x82, 0x6e, 0x0f, 0xf9, 0x60, 0xe0, 0xda, 0x82, 0x49, 0xa3, 0xb7, 0x3a,
	0xd3, 0xab, 0x02, 0xad, 0xa1, 0x37, 0x66, 0xd6, 0xad, 0xee, 0xed, 0xe5, 0xc0, 0x75, 0x04, 0xb7,
	0x4e, 0x37, 0x20, 0x8f, 0x9c, 0xc1, 0xe7, 0x13, 0xdb, 0x9d, 0x92, 0x8c, 0x08, 0x19, 0x17, 0x65,
	0x51, 0xd4, 0x90, 0x44, 0x39, 0x14, 0x35, 0x75, 0x5d, 0x16, 0x01, 0x8a, 0x90, 0x0b, 0x45, 0xf9,
	0xca, 0xbf, 0x29, 0xc8, 0x86, 0x73, 0x02, 0x73, 0x3b, 0x1d, 0x5b, 0x4d, 0xc7, 0xb1, 0x04, 0x26,
	0x09, 0x5a, 0x84, 0x9c, 0xd9, 0xd4, 0xcf, 0xd5, 0x83, 0x7d, 0x43, 0x25, 0x8a, 0x04, 0x99, 0x4a,
	0x92, 0x32, 0xd4, 0x48, 0x2a, 0x82, 0x47, 0xb8, 0x9a, 0x96, 0xa1, 0x46, 0xd6, 0x42, 0xa8, 0xed,
	0xa3, 0xab, 0x75, 0x09, 0x32, 0x95, 0x64, 0x16, 0xf0, 0xc8, 0x50, 0x49, 0x36, 0x82, 0x87, 0x28,
	0xce, 0x49, 0x90, 0xa9, 0x04, 0x42, 0x58, 0x7d, 0x89, 0xe2, 0xbc, 0x04, 0x99, 0x4a, 0x0a, 0x21,
	0xac, 0xbd, 0x52, 0x0d, 0x95, 0x14, 0x25, 0xc8, 0x54, 0x52, 0x0a, 0x60, 0x57, 0x3d, 0x78, 0x69,
	0xa8, 0x64, 0x43, 0x82, 0x4c, 0x25, 0x44, 0x86, 0x1a, 0xb9, 0x17, 0xc1, 0x23, 0xcd, 0x50, 0x09,
	0x95, 0x20, 0x53, 0xc9, 0x66, 0x08, 0x35, 0xad, 0x6a, 0xa8, 0x64, 0x4b, 0x82, 0x4c, 0x25, 0xdb,
	0x11, 0xac, 0x1d, 0x18, 0x2a, 0xb9, 0x2f, 0x41, 0xa6, 0x92, 0x9d, 0x10, 0xee, 0x1f, 0xa2, 0xb8,
	0x1c, 0xc2, 0x9a, 0x86, 0x49, 0x3e, 0xa0, 0x5b, 0x40, 0x8e, 0x59, 0xfd, 0xcd, 0x69, 0xf7, 0xec,
	0xec, 0xc4, 0x0a, 0xf6, 0x7c, 0xb1, 0xc4, 0xfa, 0x5b, 0x1f, 0x2e, 0xb1, 0x35, 0x15, 0x73, 0x7b,
	0x84, 0xe5, 0xab, 0xbf, 0x65, 0x17, 0x4d, 0xad, 0x56, 0x53, 0x8f, 0xc8, 0x2e, 0x16, 0x99, 0xc0,
	0xd5, 0xea, 0x21, 0xf9, 0xb2, 0xf2, 0x8f, 0x02, 0xc5, 0xd8, 0xa0, 0xa0, 0xdb, 0x70, 0xef, 0x74,
	0x6c, 0x21, 0x67, 0x45, 0x24, 0x49, 0xd0, 0x0c, 0xa4, 0x3a, 0x0d, 0x8d, 0x28, 0xbe, 0x51, 0x25,
	0x49, 0xdf, 0xa8, 0xf9, 0xaf, 0xcd, 0xde, 0x74, 0x9b, 0x9d, 0x86, 0x7a, 0xf0, 0x92, 0xa4, 0x69,
	0x0e, 0xd6, 0xcc, 0x76, 0xdd, 0x52, 0xc9, 0x1a, 0xd6, 0x3b, 0x9a, 0x9a, 0x56, 0x25, 0xeb, 0x11,
	0xa8, 0x1d, 0x90, 0x4c, 0x08, 0xf6, 0x0f, 0xab, 0x24, 0x1b, 0x82, 0x9a, 0xaa, 0x91, 0x1c, 0x16,
	0x66, 0x00, 0xc4, 0x3e, 0x88, 0x11, 0xb5, 0x03, 0x92, 0xc7, 0x13, 0x98, 0xed, 0xfa, 0xbe, 0x58,
	0x2e, 0x2c, 0x50, 0xed, 0x80, 0x14, 0x23, 0x84, 0x8e, 0x4b, 0x11, 0x42, 0xcf, 0x1b, 0x95, 0x4b,
	0xd8, 0x58, 0xfa, 0x94, 0xd1, 0x2c, 0xa4, 0xb1, 0xe3, 0xfc, 0xf3, 0xe9, 0xe7, 0xcc, 0x3f, 0x9f,
	0xde, 0x3a, 0xf6, 0xcf, 0x77, 0xd6, 0x3a, 0x26, 0x29, 0x34, 0x7e, 0x38, 0x37, 0x49, 0x1a, 0xfb,
	0x48, 0x3f, 0xd6, 0xad, 0xd3, 0xb1, 0xd5, 0xb5, 0xaf, 0xae, 0xdc, 0x51, 0xcf, 0x2f, 0x66, 0xe4,
	0xba, 0x86, 0x6e, 0xbe, 0x22, 0xeb, 0x95, 0x26, 0xec, 0x7e, 0xf4, 0xef, 0x9d, 0xde, 0x07, 0x2a,
	0xba, 0xda, 0xd0, 0x4d, 0xf5, 0x42, 0xad, 0x59, 0x3a, 0x2a, 0x48, 0x02, 0x53, 0x45, 0xfe, 0xac,
	0xde, 0xec, 0x12, 0xa5, 0x72, 0x04, 0x05, 0xf9, 0x8f, 0x1a, 0xf3, 0xc4, 0x39, 0x43, 0x12, 0x78,
	0x57, 0x18, 0x0f, 0x81, 0x82, 0xb4, 0x8e, 0x56, 0x12, 0xad, 0xd7, 0x68, 0xa5, 0x2a, 0x5f, 0x41,
	0x31, 0xf6, 0x6f, 0x2b, 0x0e, 0xa4, 0x77, 0xfc, 0x23, 0xbe, 0xd6, 0x3b, 0x44, 0xa9, 0xbc, 0x87,
	0x62, 0xec, 0x87, 0x14, 0xdf, 0x3c, 0x96, 0x14, 0xae, 0xfa, 0xb1, 0x04, 0x6d, 0x9a, 0xfe, 0xbd,
	0x34, 0xcc, 0x3a, 0x49, 0xa2, 0xb8, 0xc1, 0x3d, 0x9c, 0xa8, 0x23, 0x77, 0xe6, 0xb9, 0x8e, 0x85,
	0x74, 0x0a, 0x9f, 0xbd, 0xa9, 0xa3, 0x99, 0xa6, 0x3b, 0xb0, 0x19, 0x57, 0xf8, 0x0b, 0x6b, 0x95,
	0xb7, 0xb0, 0xbd, 0xf2, 0x17, 0x53, 0x9c, 0xcf, 0x68, 0xb4, 0xfc, 0x39, 0x73, 0x7e, 0x62, 0xaa,
	0x9a, 0xd5, 0x65, 0x2d, 0xa2, 0xd0, 0x4d, 0xd8, 0x08, 0xa0, 0x69, 0x58, 0xe7, 0x63, 0xab, 0x63,
	0x92, 0x24, 0x96, 0xb4, 0xc9, 0x07, 0xdc, 0xf1, 0x2c, 0x66, 0xbf, 0x27, 0xa9, 0xca, 0x73, 0xe1,
	0x76, 0xc5, 0xcf, 0x5e, 0x16, 0xd2, 0xad, 0x56, 0xa3, 0x4d, 0x12, 0x68, 0x35, 0xf5, 0x46, 0x9b,
	0x28, 0x97, 0xeb, 0x62, 0xe4, 0xef, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x2d, 0x9d, 0xcf,
	0xde, 0x0d, 0x00, 0x00,
}
